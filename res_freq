import numpy as np

def fill_matrix(N):
    M=(N*N+4*N-5)//8
    m = np.zeros((M,M))
    #fill diagonal
    if N>3:
        for i in range((N*N-9)//8):
            m[i,i]=4

    for i in range ((N*N-9)//8, M-1):
        m[i,i]=3

    m[M-1,M-1]=2

    #with the element right of you
    m[0,1]=m[1,0]=-2
    if N>3:
        for i in range ((N-3)//2):
            a=(i*i+5*i)//2+2
            b=a+i+1
            m[a,a+1]=m[a+1,a]=m[b,b+1]=m[b+1,b]=-2**0.5

    if N>5:
        for i in range ((N-5)//2):
            a=(i*i+7*i)//2+6
            b=a+i+1
            for j in range (a,b):
                m[j,j+1]=m[j+1,j]=-1
    #with the element up of you
    if N>3:
        for i in range ((N-3)//2):
            a=(i*i+3*i)//2
            b=a+i+1
            for j in range (a,b):
                m[j,j+i+2]=m[j+i+2,j]=-1
        for i in range ((N-3)//2):
            a=(i*i+5*i)//2+1
            m[a,a+i+2]=m[a+i+2,a]=-2**0.5

    return (m)
    

#INPUT VALUES    
N = 7

#verification
if N<3:
    print('N must be >=3')
elif N%2==0:
    print('N must be odd')
else:
    #eigenvalues
    k=np.linalg.eigvalsh(fill_matrix(N))
    for x in k:
        x=x**0.5
        print(x)
